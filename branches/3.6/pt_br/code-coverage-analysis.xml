<?xml version="1.0" encoding="utf-8" ?>

<chapter id="code-coverage-analysis">
  <title>Análise de Cobertura de Código</title>

  <blockquote>
    <attribution>Murali Nandigama</attribution>
    <para>
      The beauty of testing is found not in the effort but in the effiency.
    </para>
    <para>
      - A beleza do teste não é encontrado no esforço, mas na eficiência.
    </para>
    <para>
      Knowing what should be tested is beautiful, and knowing what is being
      tested is beautiful.
    </para>
    <para>
      - Saber o que deve ser testado é lindo, e saber o que está sendo
      testado é lindo.
    </para>
  </blockquote>

  <para>
    <indexterm><primary>Code Coverage (Cobertura de código)</primary></indexterm>

    Neste capítulo você irá aprender tudo sobre PHPUnit's cobertura de código
    funcionalidade que fornece uma visão de quais partes do código
    produzido são executados quando os testes são executados. Ela ajuda a responder perguntas
    como:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        Como você encontrar código que ainda não é testado -- ou, em outras palavras, ainda
        não <emphasis>coberto</emphasis> por um teste?
      </para>
    </listitem>
    <listitem>
      <para>Como você avaliar que o teste foi concluído?</para>
    </listitem>
  </itemizedlist>

  <para>
    Um exemplo de que estatistícas de cobertura de código pode dizer é que se houver um
    método com 100 linhas de código, e apenas 75 dessas linhas são realmente
    executadas quando os testes estão sendo executados, em seguida, o método é considerado como tendo uma
    cobertura de código de 75 por cento.
  </para>

  <para>
    <indexterm><primary>Xdebug</primary></indexterm>

    PHPUnit's funcionalidade de cobertura de código faz uso do
    <ulink url="http://github.com/sebastianbergmann/php-code-coverage">PHP_CodeCoverage</ulink>
    componente, que por sua vez aproveita a funcionalidade de cobertura
    fornecida pelo <ulink url="http://www.xdebug.org/">Xdebug</ulink>
    extensão para PHP.
  </para>

  <para>
    Vamos gerar um relatório de cobertura de código para a <literal>BankAccount</literal>
    classe de <xref linkend="test-driven-development.bankaccount-example.examples.BankAccount2.php" />.
  </para>

  <screen><userinput>phpunit --coverage-html ./report BankAccountTest</userinput>
PHPUnit 3.6.0 by Sebastian Bergmann.

...

Time: 0 seconds

OK (3 tests, 3 assertions)

Generating report, this may take a moment.</screen>

  <para>
    <xref linkend="code-coverage-analysis.figures.Code_Coverage.png" /> Mostra
    um trecho de um relatório de Cobertura de Código. Linhas de códido que foram executadas
    durante a execução dos testes são destacadas em verde, linhas de código que são
    executáveis mas não foram executadas são destacadas em vermelho, e "código morto" é
    destacado em cinza. O número da esquerda para a linha atual do código indica
    quantos testes cobriram está linha.
  </para>

  <figure id="code-coverage-analysis.figures.Code_Coverage.png">
    <title>Cobertura de Código para <literal>setBalance()</literal></title>

    <graphic fileref="figures/Code_Coverage.png" />
  </figure>

  <para>
    Clicando sobre o número da linha de uma linha coberta será aberto um painel (veja
    <xref linkend="code-coverage-analysis.figures.Code_Coverage2.png"/>) que
    mostra os casos de testes que cobrem está linha.
  </para>

  <figure id="code-coverage-analysis.figures.Code_Coverage2.png">
    <title>Painel com informações sobre a cobertura de testes</title>

    <graphic fileref="figures/Code_Coverage2.png" />
  </figure>

  <para>
    O relatório de cobertura de código para nosso <literal>BankAccount</literal> exemplo
    mostra que nós não temos nenhum teste ainda que chamar o
    <literal>setBalance()</literal>, <literal>depositMoney()</literal>, e
    <literal>withdrawMoney()</literal> métodos com valores legais.
    <xref linkend="code-coverage-analysis.examples.BankAccountTest.php" />
    mostra um teste que pode ser adicionado a <literal>BankAccountTest</literal>
    classe de caso de teste para cobrir completamente a <literal>BankAccount</literal>
    classe.
  </para>

  <example id="code-coverage-analysis.examples.BankAccountTest.php">
    <title>Teste em falta para atingir a cobertura de código completa</title>
    <programlisting><![CDATA[<?php
require_once 'BankAccount.php';

class BankAccountTest extends PHPUnit_Framework_TestCase
{
    // ...

    public function testDepositWithdrawMoney()
    {
        $this->assertEquals(0, $this->ba->getBalance());
        $this->ba->depositMoney(1);
        $this->assertEquals(1, $this->ba->getBalance());
        $this->ba->withdrawMoney(1);
        $this->assertEquals(0, $this->ba->getBalance());
    }
}
?>]]></programlisting>
  </example>

  <para>
    <xref linkend="code-coverage-analysis.figures.Code_Coverage3.png" /> Mostra
    a cobertura de código do <literal>setBalance()</literal> com o teste
    adicional.
  </para>

  <figure id="code-coverage-analysis.figures.Code_Coverage3.png">
    <title>Cobertura de Código para <literal>setBalance()</literal> com teste adicional</title>

    <graphic fileref="figures/Code_Coverage3.png" />
  </figure>

  <section id="code-coverage-analysis.specifying-covered-methods">
    <title>Especificando Métodos Cobertos</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@covers</primary></indexterm>

      A <literal>@covers</literal> anotação (veja
      <xref linkend="appendixes.annotations.covers.tables.annotations"/>) pode ser
      usado no código de teste para especificar qual método(s) um método de teste quer
      testar. Se fornecido, somente informações de cobertura de código para o método(s)
      será considerada.
      <xref linkend="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php"/>
      mostra um exemplo.
    </para>

    <example id="code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php">
      <title>Testes que especificam qual o método que eles querem cobrir</title>
      <programlisting><![CDATA[<?php
require_once 'BankAccount.php';

class BankAccountTest extends PHPUnit_Framework_TestCase
{
    protected $ba;

    protected function setUp()
    {
        $this->ba = new BankAccount;
    }

    /**
     * @covers BankAccount::getBalance
     */
    public function testBalanceIsInitiallyZero()
    {
        $this->assertEquals(0, $this->ba->getBalance());
    }

    /**
     * @covers BankAccount::withdrawMoney
     */
    public function testBalanceCannotBecomeNegative()
    {
        try {
            $this->ba->withdrawMoney(1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::depositMoney
     */
    public function testBalanceCannotBecomeNegative2()
    {
        try {
            $this->ba->depositMoney(-1);
        }

        catch (BankAccountException $e) {
            $this->assertEquals(0, $this->ba->getBalance());

            return;
        }

        $this->fail();
    }

    /**
     * @covers BankAccount::getBalance
     * @covers BankAccount::depositMoney
     * @covers BankAccount::withdrawMoney
     */

    public function testDepositWithdrawMoney()
    {
        $this->assertEquals(0, $this->ba->getBalance());
        $this->ba->depositMoney(1);
        $this->assertEquals(1, $this->ba->getBalance());
        $this->ba->withdrawMoney(1);
        $this->assertEquals(0, $this->ba->getBalance());
    }
}
?>]]></programlisting>
    </example>
  </section>

  <section id="code-coverage-analysis.ignoring-code-blocks">
    <title>Ignorando Blocos de Código</title>

    <para>
      <indexterm><primary>Annotation</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnore</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreStart</primary></indexterm>
      <indexterm><primary>@codeCoverageIgnoreEnd</primary></indexterm>

      Às vezes você tem blocos de código que você não pode testar e que pode
      querer ignorar durante a análise de cobertura de código. PHPUnit permite fazer isso
      usando o <literal>@codeCoverageIgnore</literal>,
      <literal>@codeCoverageIgnoreStart</literal> e
      <literal>@codeCoverageIgnoreEnd</literal> anotações como mostrado em
      <xref linkend="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php"/>.
    </para>

    <example id="code-coverage-analysis.ignoring-code-blocks.examples.Sample.php">
      <title>Usando o <literal>@codeCoverageIgnore</literal>, <literal>@codeCoverageIgnoreStart</literal> e <literal>@codeCoverageIgnoreEnd</literal> anotações</title>
        <programlisting><![CDATA[<?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (FALSE) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}
?>]]></programlisting>
    </example>

    <para>
      As linhas de código que são marcadas para serem ignoradas usando as anotações
      são contadas como executadas (se são executáveis) e não serão
      destacadas.
    </para>
  </section>

  <section id="code-coverage-analysis.including-excluding-files">
    <title>Incluindo e Excluindo Arquivos</title>

    <para>
      <indexterm><primary>Code Coverage</primary></indexterm>
      <indexterm><primary>Blacklist</primary></indexterm>
      <indexterm><primary>Whitelist</primary></indexterm>

      Por padrão, todos os arquivos de código fonte que contêm pelo menos uma linha de código
      que tenha sido executado (e somente esses arquivos) são incluídos no relatório.
      Os arquivos de código fonte que estão incluídos no relatório podem ser filtrados
      usando uma lista negra (blacklist) ou uma lista branca (whitelist).
    </para>

    <para>
      A lista negra (blacklist) é pré-preenchida com todos os arquivos de código fonte do próprio PHPUnit
      bem como os testes. Quando a lista branca (whitelist) é vazia (padrão), a lista negra
      é usada. Quando a lista branca (whitelist) não está vazia, a lista branca é usada. Quando
      lista branca é usada, cada arquivo na lista opcionalmente é adicionado
      ao relatório de cobertura de código independentemente da existência ou não foi executado.
    </para>

    <para>
      PHPUnit's XML arquivo de configuração (veja <xref linkend="appendixes.configuration.blacklist-whitelist"/>)
      pode ser usado para controlar a lista negra (blacklist) e a lista branca (whitelist). Usar uma 
      lista branca (whitelist) é prática recomendada para controlar a lista de arquivos incluídos no
      relatório de cobertura de código.
    </para>

    <para>
      <indexterm><primary>PHP_CodeCoverage_Filter</primary></indexterm>

      Alternativamente, você pode configurar os arquivos de código fonte que são incluídos no
      relatório usando o <literal>PHP_CodeCoverage_Filter</literal> API.
    </para>
  </section>
</chapter>
