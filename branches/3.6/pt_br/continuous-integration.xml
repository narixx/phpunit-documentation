<?xml version="1.0" encoding="utf-8" ?>

<chapter id="continuous-integration">
  <title>Continuous Integration</title>

  <para>
    This chapter provides an overview of Continuous Integration summarizing
    the technique and its application with PHPUnit.
  </para>

  <blockquote>
    <attribution>Martin Fowler</attribution>
    <para>
      <ulink url="http://www.martinfowler.com/articles/continuousIntegration.html">Continuous Integration</ulink>
      is a software development practice where members of a team integrate
      their work frequently, usually each person integrates at least daily,
      leading to multiple integrations per day. Each integration is verified
      by an automated build (including test) to detect integration errors as
      quickly as possible. Many teams find that this approach leads to
      significantly reduced integration problems and allows a team to develop
      cohesive software more rapidly.
    </para>
  </blockquote>

  <para>
    Continuous Integration demands a fully automated and reproducible build,
    including testing, that runs many times a day. This allows each developer
    to integrate daily thus reducing integration problems. While this can
    be achieved by setting up a
    <ulink url="http://en.wikipedia.org/wiki/Crontab">cronjob</ulink> that
    makes a fresh checkout from the project's
    <ulink url="http://en.wikipedia.org/wiki/Source_code_repository">source
    code repository</ulink> at regular intervals, runs the tests, and
    publishes the results, a more comfortable solution may be desired.
  </para>

  <section id="continuous-integration.atlassian-bamboo">
    <title>Atlassian Bamboo</title>

    <para>
      <indexterm><primary>Atlassian Bamboo</primary></indexterm>

      <ulink url="http://www.atlassian.com/software/bamboo/">Atlassian Bamboo</ulink>
      is a Continuous Integration (CI) server that assists software development
      teams by providing automated building and testing of software source-code
      status, updates on successful/failed builds, and reporting tools for
      statistical analysis.
    </para>

    <para>
      The following example assumes that the Bamboo distribution archive has
      been unpacked into <filename>/usr/local/Bamboo</filename>.
    </para>

    <orderedlist>
      <listitem><screen><userinput>cd /usr/local/Bamboo</userinput></screen></listitem>
      <listitem><para>Edit the <filename>webapp/WEB-INF/classes/bamboo-init.properties</filename> file.</para></listitem>
      <listitem><para>Optionally install the <literal>bamboo-checkstyle</literal> plugin.</para></listitem>
    </orderedlist>

    <example id="continuous-integration.atlassian-bamboo.examples.bamboo-init.properties">
      <title>bamboo-init.properties</title>
      <programlisting><![CDATA[bamboo.home=/usr/local/Bamboo]]></programlisting>
    </example>

    <orderedlist continuation="continues">
      <listitem><screen><userinput>./bamboo.sh start</userinput></screen></listitem>
      <listitem><para>Open <filename>http://localhost:8085/</filename> in your webbrowser.</para></listitem>
      <listitem><para>Follow the guided installation instructions.</para></listitem>
      <listitem><para>Configure Apache Ant as a Builder in the Administration panel.</para></listitem>
    </orderedlist>

    <para>
      Bamboo is now configured and we can set up a project plan. First we need
      a project, though. For the purpose of this example lets assume we have a
      copy of the <filename>Money</filename> sample that ships with PHPUnit in a
      Subversion repository (<filename>file:///var/svn/money</filename>).
      Together with the <filename>*.php</filename> files we also have the
      following Apache Ant build script (<filename>build.xml</filename>) in the
      repository.
    </para>

    <example id="continuous-integration.atlassian-bamboo.examples.build.xml">
      <title>build.xml</title>
      <programlisting><![CDATA[<project name="Money" default="build">
 <target name="clean">
  <delete dir="${basedir}/build"/>
 </target>

 <target name="prepare">
  <mkdir dir="${basedir}/build"/>
  <mkdir dir="${basedir}/build/logs"/>
 </target>

 <target name="phpcs">
  <exec dir="${basedir}"
        executable="phpcs"
        output="${basedir}/build/logs/checkstyle.xml"
        failonerror="false">
   <arg line="--report=checkstyle ." />
  </exec>
 </target>

 <target name="phpunit">
  <exec dir="${basedir}" executable="phpunit" failonerror="true">
   <arg line="--log-xml         ${basedir}/build/logs/phpunit.xml
              --coverage-clover ${basedir}/build/logs/clover.xml
              --coverage-html   ${basedir}/build/coverage
              MoneyTest" />
  </exec>
 </target>

 <target name="build" depends="clean,prepare,phpcs,phpunit"/>
</project>]]></programlisting>
    </example>

    <para>
      Now that we have a project, we can create a plan for it in Bamboo.
    </para>

    <orderedlist continuation="continues">
      <listitem><para>Open <filename>http://localhost:8080/</filename> in your webbrowser.</para></listitem>
      <listitem><para>Follow the guided "Create a Plan" instructions.</para></listitem>
      <listitem><para>In step 3 of "Create a Plan", check the "The build will produce test results" and "Clover output will be produced" options and provide the paths to the XML files produced by PHPUnit.</para><para>If you installed the <literal>bamboo-checkstyle</literal> plugin also check the "CheckStyle output will be produced" option and provide the path of the XML file produced by <ulink url="http://pear.php.net/package/PHP_CodeSniffer/">PHP_CodeSniffer</ulink>.</para></listitem>
      <listitem><para>In step 5 of "Create a Plan", set up an artifact for the HTML files (<filename>*.*</filename>, <filename>build/coverage</filename>) that PHPUnit produces.</para></listitem>
    </orderedlist>
  </section>

  <section id="continuous-integration.cruisecontrol">
    <title>CruiseControl</title>

    <para>
      <indexterm><primary>Apache Ant</primary></indexterm>
      <indexterm><primary>CruiseControl</primary></indexterm>

      <ulink url="http://cruisecontrol.sourceforge.net/">CruiseControl</ulink>
      is a framework for continuous build processes and includes, but is not
      limited to, plugins for email notification, <ulink
      url="http://ant.apache.org/">Apache Ant</ulink>, and various source
      control tools. A web interface is provided to view the details of the
      current and previous builds.
    </para>

    <para>
      The following example assumes that CruiseControl has been installed into
      <filename>/usr/local/cruisecontrol</filename>.
    </para>

    <orderedlist>
      <listitem><screen><userinput>cd /usr/local/cruisecontrol</userinput></screen></listitem>
      <listitem><screen><userinput>mkdir -p projects/Money/build/logs</userinput></screen></listitem>
      <listitem><screen><userinput>cd projects/Money</userinput></screen></listitem>
      <listitem><screen><userinput>svn co file:///var/svn/money source</userinput></screen></listitem>
      <listitem><para>Edit the <filename>build.xml</filename> file.</para></listitem>
    </orderedlist>

    <example id="continuous-integration.cruisecontrol.examples.build.xml">
      <title>projects/Money/build.xml</title>
      <programlisting><![CDATA[<project name="Money" default="build" basedir=".">
 <target name="checkout">
  <exec dir="${basedir}/source/" executable="svn">
   <arg line="up"/>
  </exec>
 </target>

 <target name="test">
  <exec dir="${basedir}/source" executable="phpunit" failonerror="true">
   <arg line="--log-xml ${basedir}/build/logs/phpunit.xml MoneyTest"/>
  </exec>
 </target>

 <target name="build" depends="checkout,test"/>
</project>]]></programlisting>
    </example>

    <orderedlist continuation="continues">
      <listitem><screen><userinput>cd /usr/local/cruisecontrol</userinput></screen></listitem>
      <listitem><para>Edit the <filename>config.xml</filename> file.</para></listitem>
    </orderedlist>

    <example id="continuous-integration.cruisecontrol.examples.config.xml">
      <title>config.xml</title>
      <programlisting><![CDATA[<cruisecontrol>
  <project name="Money" buildafterfailed="false">
    <plugin
    name="svnbootstrapper"
    classname="net.sourceforge.cruisecontrol.bootstrappers.SVNBootstrapper"/>
    <plugin
    name="svn"
    classname="net.sourceforge.cruisecontrol.sourcecontrols.SVN"/>

    <listeners>
      <currentbuildstatuslistener file="logs/${project.name}/status.txt"/>
    </listeners>

    <bootstrappers>
      <svnbootstrapper localWorkingCopy="projects/${project.name}/source/"/>
    </bootstrappers>

    <modificationset>
      <svn localWorkingCopy="projects/${project.name}/source/"/>
    </modificationset>

    <schedule interval="300">
      <ant
      anthome="apache-ant-1.7.0"
      buildfile="projects/${project.name}/build.xml"/>
    </schedule>

    <log dir="logs/${project.name}">
      <merge dir="projects/${project.name}/build/logs/"/>
    </log>

    <publishers>
      <currentbuildstatuspublisher
      file="logs/${project.name}/buildstatus.txt"/>

      <email
      mailhost="localhost"
      buildresultsurl="http://cruise.example.com/buildresults/${project.name}"
      skipusers="true"
      spamwhilebroken="true"
      returnaddress="project@example.com">
        <failure address="dev@lists.example.com" reportWhenFixed="true"/>
      </email>
    </publishers>
  </project>
</cruisecontrol>]]></programlisting>
    </example>

    <para>
      Now we can (re)start the CruiseControl server.
    </para>

    <orderedlist continuation="continues">
      <listitem><screen><userinput>./cruisecontrol.sh</userinput></screen></listitem>
      <listitem><para>Open <filename>http://localhost:8080/</filename> in your webbrowser.</para></listitem>
    </orderedlist>
  </section>

  <section id="continuous-integration.phpUnderControl">
    <title>phpUnderControl</title>

    <para>
      <indexterm><primary>phpUnderControl</primary></indexterm>

      <ulink url="http://www.phpundercontrol.org/">phpUnderControl</ulink> is an
      extension for CruiseControl that integrates several PHP development tools,
      such as PHPUnit for testing,
      <ulink url="http://pear.php.net/package/PHP_CodeSniffer">PHP_CodeSniffer</ulink>
      for <ulink url="http://en.wikipedia.org/wiki/Static_code_analysis">static
      code analysis</ulink>, and <ulink url="http://www.phpdoc.org/">PHPDocumentor</ulink>
      for <ulink url="http://en.wikipedia.org/wiki/Documentation_generator">API
      documentation generation</ulink>. It comes with a powerful command-line
      tool that can, among other things, automatically create CruiseControl's
      XML configuration files for your project. The following example assumes
      that CruiseControl has been installed into
      <filename>/usr/local/cruisecontrol</filename>.
    </para>

    <orderedlist>
      <listitem><screen><userinput>pear install --alldeps phpunit/phpUnderControl</userinput></screen></listitem>
      <listitem><screen><userinput>phpuc install /usr/local/cruisecontrol</userinput></screen></listitem>
      <listitem><screen><userinput>phpuc project --version-control svn
              --version-control-url file:///var/svn/money
              --test-case MoneyTest
              --test-file MoneyTest.php
              --test-dir .
              --project-name Money
              /usr/local/cruisecontrol</userinput></screen></listitem>
    </orderedlist>

    <para>
      The above command creates the project directory and the project's
      <filename>build.xml</filename> configuration file, performs the initial
      checkout from the source repository, and adds the new project to the
      global <filename>config.xml</filename> configuration file. Now we can
      (re)start the CruiseControl server.
    </para>

    <orderedlist continuation="continues">
      <listitem><screen><userinput>cd /usr/local/cruisecontrol</userinput></screen></listitem>
      <listitem><screen><userinput>./cruisecontrol.sh</userinput></screen></listitem>
      <listitem><para>Open <filename>http://localhost:8080/</filename> in your webbrowser.</para></listitem>
    </orderedlist>
  </section>
</chapter>
